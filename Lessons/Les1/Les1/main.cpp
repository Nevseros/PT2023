
// всё, что находится справа от двойного слеша - игнорируется компилятором

/* Это многострочный комментарий.
Эта строка игнорируется
и эта тоже. */

// Подключение стандартной библиотеки <iostream>
#include <iostream>

//функция main - основное тело программы
//int main() {
//    int a;      // объявляем целочисленную переменную a
//    a = 5;      // 5 имеет значение 5, которое затем присваивается переменной а
//    a = 4 + 6;  // 4 + 6 имеет значение 10, которое затем присваивается переменной а
//
//    int b;      // объявляем целочисленную переменную b
//    b = a;      // a имеет значение 10 (исходя из предыдущих операций), которое затем присваивается переменной b
//    b = b;      // b имеет значение 10, которое затем присваивается переменной b (ничего не происходит)
//    b = b + 2;  // b + 2 имеет значение 12, которое затем присваивается переменной b
//
//    int c = 8;  // инициализируем переменную c значением 8
//    std::cout << c;
//    return 0;
//}



//int main() {
////    std::cout используется для вывода значения (cOUT = вывод);
////    std::cin используется для получения значения (cIN = ввод);
////    std::endl - перенос строки. Символ \n - тоже
//    int a;
//    std::cout << "Введите число \n";
//    std::cin >> a;
//    std::cout << "Вы ввели число: " << a << std::endl;
//
//    return 0;
//}




// void означает, что функция не возвращает значения
void returnNothing()
{
    std::cout << "Hi!" << std::endl;
    // Эта функция не возвращает никакого значения, поэтому оператор return здесь не нужен
}

// Функция getValueFromUser() получает значение от пользователя, а затем возвращает его обратно в caller
int getValueFromUser()
{
   std::cout << "Enter an integer: ";
   int x;
   std::cin >> x;
   return x;
}

//int main()
//{
//    returnNothing();
//    int a = getValueFromUser(); // первый вызов функции getValueFromUser()
//    int b = getValueFromUser(); // второй вызов функции getValueFromUser()
//    std::cout << a << " + " << b << " = " << a + b << std::endl;
//
//   return 0;
//}



// Эта функция имеет один параметр типа int: a
void printValue(int a)
{
   std::cout << a << std::endl;
}
 
// Эта функция имеет два параметра типа int: a и b
// Функция add() принимает два целых числа в качестве параметров и возвращает их сумму
// Значения a и b определяет caller
int add(int a, int b)
{
   return a + b;
}

//int main()
//{
//    printValue(7); // 7 – это аргумент функции printValue()
//    add(4, 5); // 4 и 5 – это аргументы функции add()
//
//   return 0;
//}




// Правило: Имена, которые используются внутри функции (включая параметры), доступны/видны только внутри этой же функции.

//int add(int a, int b) // здесь создаются переменные a и b функции add()
//{
//   return a + b;
//} // здесь a и b функции add() выходят из области видимости и уничтожаются
//
//int main()
//{
//   int a = 7; // здесь создается переменная a функции main()
//   int b = 8; // здесь создается переменная b функции main()
//   std::cout << add(a, b) << std::endl; // значения переменных a и b функции main() копируются в переменные a и b функции add()
//   return 0;
//} // здесь a и b функции main() выходят из области видимости и уничтожаются




//Оформление кода
//int main() {
//
//    int value; // корректно
//
//    int Value; // некорректно (должно начинаться с буквы в нижнем регистре)
//    int VALUE; // некорректно (должно начинаться с буквы в нижнем регистре)
//    int VaLuE; // некорректно (должно начинаться с буквы в нижнем регистре)
//
//
//    int my_variable_name;    // корректно (разделяется символом подчёркивания)
//    void my_function_name(); // корректно (разделяется символом подчёркивания)
//
//    int myVariableName;    // корректно (используется CamelCase)
//    void myFunctionName(); // корректно (используется CamelCase)
//
//    int my variable name;    // некорректно (пробелы запрещены)
//    void my function name(); // некорректно (пробелы запрещены)
//
//    int MyVariableName;       // работает, но не рекомендуется (следует начинать с буквы в нижнем регистре)
//    void MyFunctionName();    // работает, но не рекомендуется
//}

void func1() {
    int a = 5;
    std::cout << a;
}

void func2()
{
    int a = 5;
    std::cout << a;
}



//Типы данных
//void var_types(){
////    5 основных типов данных
//    bool bValue = true;         //true или false
//    char chValue = 'c';         //символ
//    int nValue = 123;           //целое число
//    float fValue = 2.34567;     //десятичная дробь
//    double dValue = 3.45678;    //десятичная дробь, диапазон значений больше чем float + точность выше
//
//
////    целочисленные типы
////    char        1 байт
////    short       2 байта
////    int         2 байта (но чаще всего 4 байта)
////    long        4 байта
////    long long   8 байт
//
////    signed      имеет знак + или -
////    unsigned    только +
//
//    signed char c;          // от -128 до 127
//    signed short s;         // от -32 768 до 32 767
//    signed int i;           // от -32 768 до 32 767 (если 2 байта)
//    signed long l;          // от -2 147 483 648 до 2 147 483 647
//    signed long long ll;    // от -9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
//
//    unsigned char c1;       // от 0 до 255
//    unsigned short s1;      // от 0 до 65 535
//    unsigned int i1;        // от 0 до 65 535 (если 2 байта)
//    unsigned long l1;       // от 0 до 4 294 967 295
//    unsigned long long ll1; // от 0 до 18 446 744 073 709 551 615
//
//
//    // Числа с плавающей точкой
//    float floatValue;
//    double doubleValue;
//    long double doubleValue2;

//    char ch1(97);  // инициализация переменной типа char целым числом 97
//    char ch2('a'); // инициализация переменной типа char символом 'a' (97)
//
//    // Перевод переменной из одного типа данных в другой
//    std::cout << static_cast<int>(ch) << std::endl;
//}


// Логический тип переменной
void check_bool(bool flag){
    
    //Обычно логические переменные используются в условных операторах
    if (flag){
        std::cout << "flag is true" << std::endl;
    }
    else {
        std::cout << "flag is false" << std::endl;
    }
}

//int main(){
//    bool test_flag = false;
//
//    //значение логических выражений является boolean
//    bool b1 = (5==1);
//    bool b2 = (5>1);
//    bool b3 = (5>5);
//    bool b4 = (5>=5);
//    bool b5 = (5!=1);
//
//    check_bool(test_flag);
//    check_bool(b1);
//    check_bool(b2);
//    check_bool(b3);
//    check_bool(b4);
//    check_bool(b5);
//
//
//    //Если в условный оператор if передать не нулевое число, то выполнится тело if
//    int a = 123;
//    if (a){
//        std::cout << "if body" << std::endl;
//    }
//    else{
//        std::cout << "else body" << std::endl;
//    }
//
//    return 0;
//}




